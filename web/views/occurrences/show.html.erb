<table class="table is-striped is-bordered occurrences-summary">
  <thead>
    <tr>
      <th>Counted</th>
      <th>Other</th>
      <th>Total</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><span id="occurrences-countable-sum"></span></td>
      <td><span id="occurrences-uncountable-sum"></span></td>
      <td class="is-selected"><span id="occurrences-total-sum"></span></td>
    </tr>
  </tbody>
</table>

<template id="occurrence-template">
  <tr class="occurrence" data-occurrence-id="">
    <td class="occurrence-group-name"></td>
    <td class="occurrence-species-name"></td>
    <td class="occurrence-quantity"></td>
    <td>
      <div class="field has-addons">
        <button class="button is-small increase-quantity" data-shift="1">+</button>
        <button class="button is-small set-quantity">=</i></button>
      </div>
    </td>
    <td class="field">
      <select class="occurrence-status update-status" name="occurrence-status">
        <% Paleolog::CountingSummary::STATUSES.each do |value, symbol| %>
          <option value="<%= value %>"><%= symbol %></option>
        <% end %>
      </select>
    </td>
    <td class="field">
      <input class="occurrence-uncertain update-uncertain" name="occurrence-uncertain" type="checkbox" />
    </td>
    <td><button class="button is-small is-danger delete-occurrence">Remove</button>
  </tr>
</template>
<%= erb :'occurrences/_set_quantity_dialog.html', layout: false %>

<table class="table is-striped is-bordered is-narrow is-fullwidth">
  <thead>
    <tr align="center">
      <th>Group</th>
      <th>Species</th>
      <th colspan="2">Quantity</th>
      <th>Status</th>
      <th>Uncertain</th>
      <th></th>
    </tr>
  </thead>
  <tbody id="occurrences-collection">
    <tr>
      <td colspan="7">
        <button class="button is-small is-black is-fullwidth add-occurrence">Add</button>
      </td>
    </tr>
  </tbody>
</table>
<%= erb :'occurrences/_add_occurrence_dialog.html', layout: false %>

<script type="module">
  import { OccurrenceRequest } from '/js/requests.js';
  import { DomHelpers } from '/js/dom_helpers.js';

  $(function() {
    const projectId = <%= @project.id %>;
    const sectionId = <%= @section.id %>;
    const countingId = <%= @counting.id %>;
    const sampleId = <%= @sample.id %>;
    const countingGroupId = <%= @counting.group_id.to_json %>;
    var speciesSearch = null;

    class OccurrencesComponent {
      constructor(selector, onChange) {
        this.selector = selector
        this.onChange = onChange
      }

      loadOccurrences() {
        var attrs = {
          counting_id: countingId,
          section_id: sectionId,
          sample_id: sampleId,
        };

        new OccurrenceRequest(projectId).index(attrs).then(result => {
          result.occurrences.reverse().forEach(occurrence => {
            $(this.selector).prepend(
              this.buildOccurrenceRow(occurrence)
            );
          })
          this.onChange(result.summary)
        });
      }

      updateOccurrence(occurrenceId, attrs) {
        new OccurrenceRequest(projectId).save({ ...attrs, ...{ id: occurrenceId }}).then(result => {
          this.occurrenceElementFor(result.occurrence.id).find(".occurrence-quantity").text(result.occurrence.quantity);
          this.onChange(result.summary)
        }).catch(errors => {
          alert('Please refresh the page and try again.')
        })
      }

      removeOccurrence(occurrenceId) {
        new OccurrenceRequest(projectId).remove(occurrenceId).then(result => {
          this.occurrenceElementFor(result.occurrence.id).remove();
          this.onChange(result.summary)
        }).catch(errors => {
          alert('Please refresh the page and try again.')
        })
      }

      buildOccurrenceRow(occurrence) {
        var element = $($("#occurrence-template").html());
        element.attr("data-occurrence-id", occurrence.id);

        element.find(".occurrence-group-name").text(occurrence.group_name);
        element.find(".occurrence-species-name").text(occurrence.species_name);
        element.find(".occurrence-quantity").text(occurrence.quantity);
        element.find(".occurrence-status").val(occurrence.status);
        element.find(".occurrence-uncertain").prop('checked', occurrence.uncertain);

        element.find(".increase-quantity").click(() => {
          this.updateOccurrence(occurrence.id, { shift: 1 });
        });
        element.find('.set-quantity').click(() => {
          const modal = document.querySelector('.modal.set-quantity');
          DomHelpers.setText('.species-name', occurrence.species_name, modal);
          DomHelpers.setText('.group-name', occurrence.group_name, modal);
          const quantityElement = modal.querySelector('.occurrence-quantity');
          quantityElement.value = element.find(".occurrence-quantity").text();
          modal.classList.add('is-active');
          modal.querySelector('.button.cancel').addEventListener('click', () => {
            modal.classList.remove('is-active');
          })
          modal.querySelector('.button.confirm').addEventListener('click', () => {
            if (Number.isInteger(parseInt(quantityElement.value))) {
              this.updateOccurrence(occurrence.id, { quantity: quantityElement.value });
              modal.classList.remove('is-active');
            } else {
              alert("Please enter a number.");
            }
          })
        });
        element.find(".update-status").change((event) => {
          var status = $(event.target).val();
          this.updateOccurrence(occurrence.id, { status: status });
        });
        element.find(".update-uncertain").change((event) => {
          var uncertain;
          if($(event.target).prop("checked")) {
            uncertain = true
          } else {
            uncertain = false
          };
          this.updateOccurrence(occurrence.id, { uncertain: uncertain });
        });
        element.find('.delete-occurrence').click(() => {
          const text = 'Do you confirm removing this occurrence?'
          if (confirm(text) == true) {
            this.removeOccurrence(occurrence.id);
          }
        });

        return element;
      }

      occurrenceElementFor(id) {
        return $(".occurrence[data-occurrence-id='" + id + "']");
      }
    }

    const addOccurrence = function(speciesId, countingId, sampleId) {
      const attrs = {
        species_id: speciesId,
        counting_id: countingId,
        sample_id: sampleId,
      };
      new OccurrenceRequest(projectId).save(attrs).then(
        result => {
          const modal = document.querySelector('.modal.add-occurrence');
          modal.classList.remove('is-active');
          // TODO: add it to the displayed collection instead of reloading
          window.location.reload();
        },
        errors => {
          alert('Please refresh the page and try again.')
        }
      )
    }

    const updateSummary = function(summary) {
      $("#occurrences-uncountable-sum").text(summary.uncountable);
      $("#occurrences-countable-sum").text(summary.countable);
      $("#occurrences-total-sum").text(summary.total);
    }

    const showSearchResult = function(result) {
      $('#species-list tbody').empty();
      $('#search-species-size').text(result.result.length);
      var that = this;
      result.result.forEach(species => {
        var element = $($('#search-species-template').html());
        element.find('.species-name').text(species.name);
        element.find('.species-group-name').text(species.group_name);
        element.find('.select-species-action').click(function(event) {
          addOccurrence(species.id, countingId, sampleId)
        });
        $('#species-list tbody').append(element);
      });
    }

    $('.button.add-occurrence').click(function() {
      const modal = document.querySelector('.modal.add-occurrence');
      modal.querySelector('.button.cancel').addEventListener('click', () => {
        modal.classList.remove('is-active');
      })
      modal.classList.add('is-active');
      // TODO: exclude already present in counting
      if(!speciesSearch) {
        speciesSearch = new SpeciesSearch({
          onSpeciesSelected: function(speciesId) {
            addOccurrence(speciesId, countingId, sampleId)
          },
          onSpeciesSearched: function(result) {
            showSearchResult(result)
          },
          updatePath: false,
          initialFilter: countingGroupId ? { group_id: countingGroupId } : {},
        });
      }
    });

    new OccurrencesComponent('#occurrences-collection', updateSummary).loadOccurrences();

    const species = {
      name: null,
      group_id: null,
      //description: null,
      //environmental_preferences: null,
      //verified: false,
    }

    $('.add-species.action').click(() => {
      new SpeciesModalFormView(species, (result) => {
        addOccurrence(result.species.id, countingId, sampleId)
      }).show()
    });
  })
</script>
