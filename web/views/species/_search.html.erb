<div class="ui grid">
  <div class="sixteen wide column">
    <h1 class="ui header">Species list (<span id="search-species-size"></span>)</h1>
  </div>

  <div class="three wide column">
    <form id="species-search" class="ui form">
      <fieldset>
        <legend>Find species</legend>
        <div class="field">
          <label for="search-group-id">Group</label>
          <template id="search-group-option-template">
            <option value=""></option>
          </template>
          <select id="search-group-id" name="group_id">
          </select>
        </div>
        <div class="field">
          <label for="search-name">Name</label>
          <input id="search-name" type="text" name="name" />
        </div>
        <button class="ui button" type="submit">Search</button>
      </fieldset>
    </form>
  </div>

  <div class="thirteen wide column scrolling content">
    <template id="search-species-template">
      <tr class="species">
        <td>
          <a href="" class="species-name species-link"></a>
        </td>
        <td class="species-group-name">
        </td>
      </tr>
    </template>
    <table id="species-list" class="ui celled table">
      <thead>
        <tr>
          <th>Species</th>
          <th>Group</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
  </div>
</div>

<script type="text/javascript">
  class SpeciesSearch {
    constructor({
      onSpeciesSelected = null,
      updatePath = false,
      initialFilter = {},
    }) {
      if(onSpeciesSelected) {
        this.onSpeciesSelectedEvent = onSpeciesSelected;
      } else {
        this.onSpeciesSelectedEvent = function(speciesId) {
          // do nothing
        };
      };

      this.updatePath = updatePath;
      this.fetchAvailableSearchFilters().then(filters => {
        this.showAvailableSearchFilters(filters);
        if(Object.keys(initialFilter).length > 0) {
          this.fetchSearchResult(initialFilter).then(result => {
            this.showSearchResult(result);
            this.showFilters(initialFilter);
          })
        };
      });

      $('#species-search .button').click(event => {
        event.preventDefault();
        const attrs = {
          group_id: $('#search-group-id').val(),
          name: $('#search-name').val(),
        };
        if(this.updatePath) {
          this.updateSearchParams(attrs);
        }
        this.fetchSearchResult(attrs).then(result => this.showSearchResult(result));
      });
    }

    updateSearchParams(attrs) {
      if ('URLSearchParams' in window) {
        var searchParams = new URLSearchParams();
        var searchParamsProvided = false;
        for(var attr in attrs) {
          if(attrs[attr]) {
            searchParams.set(attr, attrs[attr]);
            searchParamsProvided = true;
          }
        }
        var newRelativePathQuery = window.location.pathname;
        if(searchParamsProvided) {
          newRelativePathQuery = newRelativePathQuery + '?' + searchParams.toString();
        }
        history.pushState(null, '', newRelativePathQuery);
      }
    }

    fetchAvailableSearchFilters() {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: '/species/search-filters',
          type: "GET",
          dataType: "json",
        })
        .done(function(json) {
          resolve(json);
        }).fail(function(xhr, status, error) {
          reject(error)
        })
      })
    }

    showAvailableSearchFilters(filters) {
      return new Promise((resolve, reject) => {
        $('#search-species-size').text(0);
        var option = $($('#search-group-option-template').html());
        option.val('');
        option.text('');
        $('#search-group-id').append(option);
        var that = this;
        filters.groups.forEach(function(group) {
          var option = $($('#search-group-option-template').html());
          option.val(group.id);
          option.text(group.name);
          $('#search-group-id').append(option);
        });
      });
    }

    showFilters(attrs) {
      for(var attr in attrs) {
        $('#species-search').find('[name=' + attr + ']').val(attrs[attr]);
      }
    }

    fetchSearchResult(attrs) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: '/species',
          data: attrs,
          type: "GET",
          dataType: "json",
        })
        .done(function(json) {
          resolve(json);
        }).fail(function(xhr, status, error) {
          reject(error);
        })
      });
    }

    showSearchResult(result) {
      $('#species-list tbody').empty();
      $('#search-species-size').text(result.result.length);
      var that = this;
      result.result.forEach(species => {
        var element = $($('#search-species-template').html());
        element.find('.species-name').text(species.name);
        element.find('.species-group-name').text(species.group_name);
        element.find('.species-link').click(function(event) {
          event.preventDefault();
          that.onSpeciesSelectedEvent(species.id);
        });
        $('#species-list tbody').append(element);
      });
    }
  }
</script>
